# The docker-compose DSL syntax format we're using
version: "3"

services:
  postgres:
    image: postgres:latest
    restart: always
    ports:
     - "5432:5432"
    volumes:
     - postgres:/var/lib/postgresql/data

    # this environment variable - as noted on Docker Hub - will
    # create a database with this name if it doesnt already exist
    # when we start out container
    environment:
     - POSTGRES_DB=recipe-retriever
     - POSTGRES_PASSWORD=retriever
     # username is postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 30s
      retries: 3
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
  node:
    image: node:11
    volumes:
      - ./server:/usr/src/service
      - nodemodules:/usr/src/service/node_modules
    working_dir: /usr/src/service
    command: bash -c "npm install && npm install pg --save && npm install -g nodemon &&  npm run start"
    ports:
    # node exposed on 8000
    # node debug on 9229
      - 9229:9229
      - 8000:8000
    environment:
      # inside of a container postgres - since its a container name- is a special usage where Docker
      # will magically forward traffic to it
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASS=retriever
      - DB_NAME=recipe-retriever
  ui:
    image: retriever_ui    # run client/build_image.sh to make this
    volumes:
     - ./client:/work/
     - /work/node_modules
    ports:
     - "3000:3000"
     - "9228:9228"      ###### NOTE THE NONSTANDARD PORT!!!! This should be 9229, but Node has that
    #links: # if ui comes up, bring up node as well, the api server TODO fix all dependencies!
    # - node
    environment:
     - REACT_APP_API_ENV=development

volumes:
  postgres:
  nodemodules:
    external: true
# need to do docker volume create nodemodules first
  # our basic node server we'll name "basic"
 # basic:
 #   # the directory path - relative to this compose file - where
 #   # we'll be able to find the Dockerfile
 #   build: ./
 #   # the port mappings we do so that traffic that docker
 #   # will forward from localhost -> container
 #   ports:
 #     - "4000:4000"
 #     - "9229:9229"

    # tell docker compose to watch ./server.js - the path relative
    # to our compose file on our computer - and then make that reflect
    # the same file at /usr/src/app/server.js inside of the container
#    volumes:
#      - "./server.js:/usr/src/app/server.js"
#    environment:
#      # inside of a container postgres - since its a container name- is a special usage where Docker
#      # will magically forward traffic to it
#      - DB_HOST=postgres
#      - DB_USER=postgres
#      - DB_NAME=recipe-retriever
